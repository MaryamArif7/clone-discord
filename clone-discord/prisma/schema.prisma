generator client {
  provider = "prisma-client-js"
}
//5.3 prism setup: pasted the code from the planetscale 
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}
//5.4 prisma setup: creating models 
model Profile{
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text
  servers Server []
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Server {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  // 13.5 in 13.4 for the server function "where " wass giving the error so instead of db.text its @unique
  //after making chnaging in prisma schema run npx prism generate and npx prism db pusuh
  inviteCode String @unique
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members Member[]
  channels Channel[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([profileId])
}
enum  MemberRole{
  ADMIN
  MODERATOR
  GUEST
}
model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  directMessages DirectMessage[]
//handeling the both of the casees is user inites the convo or just receive mesage from the use
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}
enum ChannelType{
  TEXT 
  AUDIO
  VIDEO
}
model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}
// after creating models we are rewuired to run some commands and needs to do this everytime we modlify the schema
// npx prisma genertae : this command will add the schema to the our node modules  so we can develop with it 
//npx prisma db push : this will add the all our collections to the  into our planetscale or whtever we are using for our mysqldb 
//22...updting the schema prisma
model Message {
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
// when the messgae is delted by user we are not gonna delete it from our database just from the user sides 
  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}
model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]
//cant have two converstions for one member
  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}
model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
//npx prisma generate :to add the models into the node modules
//npx  prisma db push :tp push the models to the plnaetscle